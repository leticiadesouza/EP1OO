£Aten√ß√£o: Este √© um exerc√≠cio de programa√ß√£o que visa a aplica√ß√£o de alguns conceito aprendidos durante a disciplina de orienta√ß√£o a objetos. Recomenda-se o trabalho cont√≠nuo em tal exerc√≠cio, pois o mesmo dificilmente ser√° implementado em um ou dois dias com a devida qualidade exigida. Este exerc√≠cio busca avaliar os seguintes conceitos: Cria√ß√£o de classes e objetos. Utiliza√ß√£o de atributos, m√©todos e construtores. Utiliza√ß√£o de heran√ßa. Para o melhor aproveitamento do aluno, recomenda-se que o mesmo busque v√°rias refer√™ncias externas para auxiliar na resolu√ß√£o do exerc√≠cio. O objetivo deste trabalho √© implementar programa capaz de ler arquivos de imagens nos formatos PGM e PPM e extrair informa√ß√µes embutidas nestas imagens atrav√©s da t√©cnica da esteganografia. Fundamenta√ß√£o Te√≥rica Esteganografia Para quem n√£o est√° familiarizado com seguran√ßa de dados e pessoas nos meios eletr√¥nicos a estenografia pode parecer um termo estranho. Mesmo na cultura pop, em s√©ries e filmes com essa tem√°tica essa palavra e tudo aquilo que ela envolve √© deixado um pouco de lado. O que √© esteganografia afinal? Esteganografia √© uma palavra que vem do grego e significa ‚Äúescrita oculta‚Äù. Trata-se do estudo de t√©cnicas que permitam esconder informa√ß√µes dentro de outros arquivos, sejam imagens, m√∫sicas, v√≠deos ou mesmo textos. Por exemplo, √© poss√≠vel ocultar mensagens dentro de imagens de uma forma que qualquer pessoa que n√£o a pessoa para a qual a mensagem est√° destinada, ou sem o conhecimento necess√°rio, sequer desconfie que exista algo al√©m da imagem que est√° sendo mostrada. A esteganografia est√° presente em nossa hist√≥ria h√° s√©culos. T√©cnicas como as tintas ‚Äúinvis√≠veis‚Äù e os micropontos s√£o consideradas um tipo de esteganografia. Apesar da esteganografia ser um dos v√°rios ramos dentro da criptografia, ela n√£o pode ser detectada, ao contr√°rio de arquivos cifrados. E √© justamente por isso que essas t√©cnicas para ocultar informa√ß√µes dentro de arquivos podem ter infinitas aplica√ß√µes. Qual a utilidade? Como dito antes, essa t√©cnica pode ter infinitas aplica√ß√µes, a mais comum para n√≥s √© a inser√ß√£o de mecanismos de verifica√ß√£o de direitos autorais em fotografias, m√∫sicas e v√≠deos. Outra aplica√ß√£o √© divulga√ß√£o de mensagens para destinat√°rios espec√≠ficos atrav√©s da comunica√ß√£o aberta. Tamb√©m pode ser utilizada de maneira prejudicial para a distribui√ß√£o de v√≠rus e malware escondidos em um arquivo comum. Exerc√≠cio Objetivos Esse exerc√≠cio de programa√ß√£o tem dois objetivos principais que devem ser alcan√ßados pelo aluno, sendo eles: Interpreta√ß√£o de mensagens escondidas em imagens por meio da t√©cnica da esteganografia; Aplica√ß√£o dos conceitos de Orienta√ß√£o a objetos. Para a elabora√ß√£o desse E.P ser√° levado em considera√ß√£o os seguintes conceitos de O.O.: Classes; Atributos; M√©todos; Construtores; Encapsulamento; Heran√ßa. Dessa forma, o aluno dever√° tornar mensagens escondidas em imagens evidentes utilizando o paradigma Orientado a Objetos. Fase Zero: Prepara√ß√£o Visando manter seu projeto organizado, crie a seguinte estrutura de pastas: bin: Pasta onde ser√° mantido o bin√°rio.inc: Pasta que manter√° os headers.src: Pasta que manter√° as implementa√ß√µes dos hearders.obj: Pasta que receber√° os arquivos objetos. doc: Pasta onde conter√° qualquer informa√ß√£o extra de documenta√ß√£o. Ativar o controle de vers√£o Git, na pasta do projeto. Inicialize o controle de vers√£o: git init Adicione a estrutura de pastas e/ou arquivos j√° existentes: git add . Fa√ßa o commit inicial do projeto: git commit -m Commit Inicial Criar o reposit√≥rio Git remoto no Gitlab ou Github. Por fim, crie os seguintes arquivos: Makefile: Crie o arquivo Makefile que compilar√° o seu c√≥digo e salvar√° o arquivo compilado na pasta bin. README.md: Explique de forma ORGANIZADA e direta como compilar e executar o seu programa, inclusive o caminho das imagens. Primeira Fase: Trabalhando com a imagem A primeira parte do exerc√≠cio consiste em criar um programa em C++ que manipule imagens dos tipos PGM e PPM. O seu programa deve realizar no m√≠nimo as seguintes tarefas:Ler arquivos de imagens nos formatos PGM e PPM, a partir de seu caminho em disco. Criar um m√©todo que permita salvar a imagem correspondente √† solu√ß√£o do problema com local e nome desejado. Imprimir a mensagem na tela e/ou em arquivo caso esteja escondida em arquivo PGM.Espera-se a implementa√ß√£o de pelo menos uma classe contendo os atributos para manter os dados da imagem e m√©todos para manipular tais dados.Segunda Fase: Decifrando a mensagemAp√≥s ler e armazenar os dados referentes √†s imagens, crie uma maneira de aplicar as seguintes transforma√ß√µes:Aplica√ß√£o do filtro R Aplica√ß√£o do filtro G Aplica√ß√£o do filtro B Identificar mensagem escondida nos bytes da imagem.Lembre-se que o seu objetivo √© utilizar os conceitos de Orienta√ß√£o a Objetos, logo recomenda-se uma reflec√ß√£o buscando abstrair a melhor forma de unir os dois tipos de solu√ß√£o.Espera-se pelo menos uma classe geral e classes filhas que implementem dos filtros RGB e identifica√ß√£o do texto.DICA: Crie uma classe m√£e decifragem e as classes filhas que decifram mensagem escondida na cor da imagem PGM outra para PPM.Algoritmos Como a implementa√ß√£o dos algoritmos n√£o √© o foco deste trabalho, segue o diagrama e os trechos de c√≥digo que ser√£o necess√°rios. Apesar do c√≥digo estar sendo fornecido, vale observar que √© trabalho do estudante entender e adaptar os trechos de c√≥digo.Leitura da imagem Algoritmo geral para leitura de imagens PGM e PPM. Decifrar imagem PGMO in√≠cio da mensagem pode ser aleat√≥rio dentro da imagem. Por√©m, para facilitar a implementa√ß√£o, a posi√ß√£o inicial ser√° informada dentro do arquivo da imagem ap√≥s o valor da escala de cinza. Al√©m disso, as mensagens tem tamanho vari√°vel e sempre terminam com o caractere. Para ler a mensagem escondida na imagem temos o seguinte algoritmo: loop_enquanto( posicao_de_leitura < tamanho_da_imagem ) {Posicionar o ponteiro de leitura na posi√ß√£o inicial da mensagem Ler o LSB (Least Significant Bit) - √∫ltimo bit de oito bytes seguidos para montar um √∫nico caractere. } Se (charactere_do_byte == marca_mensagem){ charactere_do_byte = 0Enquanto (charactere_do_byte != marca_mensagem && N√ÉO_CHEGOU_NO_FIM_DA_IMAGEM) { Para (i = 0; i < 8; ++i) { charactere_auxiliar = BITE_CHEIO & lista_pixels[iterador] charactere_do_byte = charactere_do_byte_deslocado_1_bit_para_esquerda charactere_do_byte = (charactere_do_byte & 11111110) OU (charactere_auxiliar & 00000001) } Se (charactere_do_byte != marca_mensagem) cout << charactere_do_byte else cout << endl } } Se(charactere_do_byte == marca_mensagem) break Decifrar imagem PPM Para (i = 0; i < imagem -> largura; i++) { Para (j = 0; j < imagem -> altura; j++) { Se (escolha_do_filtro == cor) { nova_imagem[i][j] -> cor = imagem[i][j] -> cor nova_imagem[i][j] -> outra_cor = 0 } Sen√£o Se (escolha_do_filtro == outra_cor)  { nova_imagem[i][j] -> outra_cor = imagem[i][j] -> outra_cor nova_imagem[i][j] -> cor = 0 } Orienta√ß√£o a Objetos A Orienta√ß√£o √† Objetos √© o paradigma de programa√ß√£o que se fundamenta no reuso de objetos, abstraindo-os do mundo real, permitindo assim uma melhor manutenibilidade e compreens√£o do c√≥digo.Neste trabalho, assim como durante toda a disciplina de OO, ser√° observado e avaliado a utiliza√ß√£o dos conceitos de OO. Classes Em OO, classes s√£o utilizadas para criar tipos definidos pelo usu√°rio, permitindo a cria√ß√£o de inst√¢ncias dessas classes, denominadas objetos. Os objetos s√£o criados a partir do m√©todo construtor da classe, sendo tamb√©m destru√≠dos quando necess√°rio.As classes s√£o muito importantes para abstrair objetos do mundo real, definindo suas caracter√≠sticas (atributos) e comportamentos (m√©todos). Em C++ h√° uma divis√£o entre declara√ß√£o e defini√ß√£o das classes. Sendo a utiliza√ß√£o dessa pr√°tica um dos crit√©rios avaliados neste trabalho, assim como a separa√ß√£o das classes em arquivos distintos e a utiliza√ß√£o de uma main() enxuta. Declara√ß√£o - Headers (.hpp) Os headers cont√©m a declara√ß√£o das fun√ß√µes e atributosda classe que dever√£o obrigatoriamente ser implementados, incluindo os construtores. Constantes devem ser declaradas e definidas nos headers. Defini√ß√£o - (.cpp) Nesses arquivos dever√° ser definido o comportamento das fun√ß√µes declaradas no header bem como poss√≠veis valores iniciais para os atributos. Heran√ßa Um importante conceito utilizado na Orienta√ß√£o √† Objetos √© a heran√ßa. A heran√ßa permite que uma classe herde caracter√≠sticas comuns da classe herdada (classe base). Isso permite que as classes derivadas mantenham caracter√≠sticas e comportamentos em comum com a classe base e modifiquem comportamentos e caracter√≠sticas pr√≥prias. Dessa maneira, ser√° avaliada a capacidade do aluno em descobrir a melhor maneira de organizar suas classes e utilizar o conceito de hierarquia na constru√ß√£o das mesmas. Por exemplo, os diferentes tipos de protocolos podem utilizar o conceito de hierarquia. Polimorfismo Polimorfismo √© a capacidade que os objetos possuem de se comportar de maneira diferente de acordo com o contexto em que est√£o inseridos, alterando seus comportamentos padr√£o. Um exemplo disso √© mostrado na imagem acima em que as classes derivadas sobrescrevem o m√©todo area() herdado da classe base. Assim, o m√©todo area() √© adaptado pelas classes derivadas. No entanto, essa √© uma das formas mais b√°sicas de polimorfismo. Outros exemplos incluem: fun√ß√µes virtuais; classe abstrata; classe base virtual etc. √â importante que o aluno consiga visualizar a possibilidade da utiliza√ß√£o do polimorfismo neste trabalho e utiliz√°-lo. Interface - Classe abstrata A classe abstrata √© uma classe base que tem m√©todos definidos como fun√ß√µes virtuais puras. Com isso, a classe abstrata n√£o pode ser utilizada para instanciar objetos, servindo apenas de base para as classes derivadas. Al√©m disso, as classes derivadas s√£o obrigadas aJq˙2¢<˚ˆyö+((ÔÈÌF=,õAà'qßÄ–‹hÓäõøÅªÍx˙ï©ı∞œo
ÆgyLhÉ{†ö@$ífj„^›`¡B%Y€mi√TB0™!± ”î)á–8›WZåsDvó#